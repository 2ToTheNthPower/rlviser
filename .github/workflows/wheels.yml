name: Build and Publish Wheels

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-wheels:
    name: Build wheel for ${{ matrix.platform.name }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            wheel_name: manylinux2014_x86_64
            
          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            wheel_name: win_amd64
            
          - name: macOS x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            wheel_name: macosx_10_9_x86_64
            
          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            wheel_name: macosx_11_0_arm64

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
          
      - name: Install Linux dependencies
        if: contains(matrix.platform.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ pkg-config libx11-dev libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
          
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build
          
      - name: Build Rust binary
        run: cargo build --release --target ${{ matrix.platform.target }} --no-default-features --features threaded
        
      - name: Prepare binary for wheel (Windows)
        if: contains(matrix.platform.os, 'windows')
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path rlviser/bin
          Copy-Item target/${{ matrix.platform.target }}/release/rlviser.exe rlviser/bin/
          
      - name: Prepare binary for wheel (Unix)
        if: contains(matrix.platform.os, 'ubuntu') || contains(matrix.platform.os, 'macos')
        run: |
          mkdir -p rlviser/bin
          cp target/${{ matrix.platform.target }}/release/rlviser rlviser/bin/
          chmod +x rlviser/bin/rlviser
          
      - name: Build wheel
        run: |
          python -m pip install --upgrade pip wheel build
          python -m build --wheel
          
      - name: Fix wheel platform tag
        shell: python
        run: |
          import os
          import shutil
          from pathlib import Path
          
          dist_dir = Path("dist")
          wheels = list(dist_dir.glob("*.whl"))
          
          if wheels:
              wheel = wheels[0]
              parts = wheel.stem.split("-")
              # Replace the platform tag
              parts[-1] = "${{ matrix.platform.wheel_name }}"
              new_name = "-".join(parts) + ".whl"
              new_path = dist_dir / new_name
              
              if wheel != new_path:
                  shutil.move(str(wheel), str(new_path))
                  print(f"Renamed {wheel.name} to {new_name}")
          
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform.target }}
          path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build source distribution
        run: python -m build --sdist
        
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test-wheels:
    name: Test wheel on ${{ matrix.os }}
    needs: [build-wheels]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
        
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: dist/
          merge-multiple: true
          
      - name: Install wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Find the appropriate wheel for this platform
          pip install dist/*.whl --force-reinstall
          
      - name: Test installation
        run: |
          python -c "import rlviser; print(f'RLViser version: {rlviser.__version__}')"
          python -c "import rlviser; print(f'Binary path: {rlviser.get_binary_path()}')"
          # Test that the command is available
          rlviser --help || echo "Binary execution test"

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event.inputs.publish == 'true'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Organize distributions
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec mv {} final_dist/ \;
          find dist -name "*.tar.gz" -exec mv {} final_dist/ \;
          ls -la final_dist/
          
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: final_dist/
          skip-existing: true
        continue-on-error: true
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final_dist/