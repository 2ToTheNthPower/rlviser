name: Build and Publish Wheels

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-12, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.0
        env:
          # Skip PyPy, musllinux, and i686 builds
          CIBW_SKIP: "pp* *-musllinux* *i686"
          # Build for Python 3.9-3.13 (all currently supported versions)
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          # Explicitly set architectures per OS (native only for macOS to avoid cross-compilation)
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_ARCHS_MACOS: "native"
          # Install Rust in the build environment
          CIBW_BEFORE_ALL_LINUX: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup default stable
            yum install -y libX11-devel || apt-get update && apt-get install -y libx11-dev
          CIBW_BEFORE_BUILD_LINUX: >
            cargo build --release --no-default-features --features threaded &&
            python -c "import shutil; shutil.copy2('target/release/pyviser', 'pyviser/')"
          CIBW_BEFORE_BUILD_WINDOWS: >
            cargo build --release --no-default-features --features threaded &&
            python -c "import shutil; shutil.copy2('target/release/pyviser.exe', 'pyviser/')"
          CIBW_BEFORE_BUILD_MACOS: >
            cargo build --release --no-default-features --features threaded &&
            python -c "import shutil; shutil.copy2('target/release/pyviser', 'pyviser/')"
          CIBW_BEFORE_ALL_MACOS: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup default stable
          CIBW_BEFORE_ALL_WINDOWS: >
            curl -sSf https://win.rustup.rs/x86_64 -o rustup-init.exe &&
            rustup-init.exe -y --default-toolchain stable
          CIBW_ENVIRONMENT_LINUX: PATH=/root/.cargo/bin:$PATH
          CIBW_ENVIRONMENT_MACOS: PATH=$HOME/.cargo/bin:$PATH
          CIBW_ENVIRONMENT_WINDOWS: 'PATH=C:\Users\runneradmin\.cargo\bin;%PATH%'
          # Use manylinux2014 for better compatibility
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          # Test that the wheel works
          CIBW_TEST_COMMAND: python -c "import pyviser; print('pyviser imported successfully')"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build source distribution
        run: python -m build --sdist
        
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    environment:
      name: pypi
      url: https://pypi.org/p/pyviser
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Organize distributions
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec mv {} final_dist/ \;
          find dist -name "*.tar.gz" -exec mv {} final_dist/ \;
          ls -la final_dist/
          
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: final_dist/
